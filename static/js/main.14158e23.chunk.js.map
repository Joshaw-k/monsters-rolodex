{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","App","handlechange","e","setState","searchfields","target","value","state","fetch","then","response","json","data","this","filterstate","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,G,YAAO,SAAAC,GAChB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OAC3B,4BAAIN,EAAMI,QAAQG,aCHLC,EAAW,SAAAR,GACxB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHzCM,G,MAAY,SAAAX,GACrB,OAAO,uBAAOC,UAAU,SAASW,KAAK,SAASC,YAAab,EAAMa,YAAaC,SAAUd,EAAMc,aCkCpFC,G,wDA/Bb,aAAc,IAAD,8BACX,gBAaFC,aAAe,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACC,aAAcF,EAAEG,OAAOC,SAZxD,EAAKC,MAAO,CACVb,SAAW,GACXU,aAAc,IAJL,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKT,SAAS,CAAET,SAASkB,S,+BAGhC,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAASU,EADV,EACUA,aACVU,EAAcpB,EAASqB,QAC3B,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAaY,kBAE9D,OACM,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWY,YAAa,kBAAmBC,SAAYc,KAAKZ,eAC5D,cAAC,EAAD,CAAUP,SAAYoB,W,GAzBhBI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.14158e23.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => {\r\n    return <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n<p>{props.monster.email}</p>\r\n    </div>\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => {\r\nreturn <div className='card-list'>\r\n    {props.monsters.map(monster => <Card key={monster.id} monster={monster}></Card>)}\r\n</div> \r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = props => {\r\n    return <input className='search' type='search' placeholder={props.placeholder} onChange={props.onChange}/>\r\n}","import React,{Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state ={\n      monsters : [] ,\n      searchfields: ''\n    }\n    \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => this.setState({ monsters:data}))\n  }\n  handlechange = e => this.setState({searchfields: e.target.value})\n  render(){\n    const {monsters,searchfields} = this.state\n    const filterstate = monsters.filter(\n      monster => monster.name.toLowerCase().includes(searchfields.toLowerCase())\n    )\n    return(\n          <div className=\"App\">\n            <h1>Monsters Rolodex</h1>\n            <SearchBox placeholder={'search monsters'} onChange = {this.handlechange}/>\n            <CardList monsters = {filterstate}>\n            </CardList>\n          </div>\n        );\n      \n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}